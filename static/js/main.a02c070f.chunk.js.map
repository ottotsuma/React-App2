{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","className","style","recipe","list","map","ingredient","text","Math","floor","src","alt","require","config","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","process","response","json","data","hits","length","console","log","alert","onSubmit","e","preventDefault","type","value","onChange","target","key","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+EACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,KAAO,uB,2KCqBxEC,EAnBA,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,MAAMC,EAAgC,EAAhCA,SAASC,EAAuB,EAAvBA,MAAMC,EAAiB,EAAjBA,YAClC,OACI,yBAAKC,UAAWC,IAAMC,QAClB,4BACCN,GAED,wBAAII,UAAWC,IAAME,MAChBJ,EAAYK,KAAI,SAAAC,GAAU,OACvB,4BAAKA,EAAWC,UAGxB,2BACCC,KAAKC,MAAMX,GADZ,SAGA,yBAAKG,UAAWC,IAAMH,MAAOW,IAAKX,EAAOY,IAAI,O,MCdzDC,EAAQ,IAAUC,SAElB,IAiDeC,EAjDH,WAAO,IAAD,EAEcC,mBAAS,IAFvB,mBAETC,EAFS,KAEAC,EAFA,OAGWF,mBAAS,IAHpB,mBAGTG,EAHS,KAGDC,EAHC,OAISJ,mBAAS,WAJlB,mBAITK,EAJS,KAIFC,EAJE,KAMhBC,qBAAY,WACVC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAK,0CAAqCL,EAArC,mBAAqDM,WAArD,oBAA6FA,qCADxG,cACXC,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBZ,EAAWY,EAAKC,MACZD,EAAKC,KAAKC,OAAS,IACrBC,QAAQC,IAAI,SACZC,MAAM,kBANS,2CAAH,qDAoBhB,OACE,yBAAKjC,UAAU,OACb,0BAAMkC,SARQ,SAAAC,GAChBA,EAAEC,iBACFhB,EAASH,GACTC,EAAU,KAKmBlB,UAAU,eACnC,2BAAOA,UAAU,aAAaqC,KAAK,OAAOC,MAAOrB,EAAQsB,SAb1C,SAAAJ,GACnBjB,EAAUiB,EAAEK,OAAOF,UAaf,4BAAQtC,UAAU,gBAAgBqC,KAAK,UAAvC,WAIF,yBAAKrC,UAAU,WACde,EAAQX,KAAI,SAAAF,GAAM,OACjB,kBAAC,EAAD,CACAuC,IAAOvC,EAAOA,OAAOwC,MACrB9C,MAAOM,EAAOA,OAAOwC,MAAO7C,SAAUK,EAAOA,OAAOL,SAAUC,MAAOI,EAAOA,OAAOJ,MAAOC,YAAaG,EAAOA,OAAOH,oBCnCzG4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.a02c070f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__29sk9\",\"image\":\"recipe_image__2-Z8X\",\"list\":\"recipe_list__2EJUU\"};","import React from 'react';\r\nimport style from './recipe.module.css'\r\n\r\nconst Recipe = ({title,calories,image,ingredients}) => {\r\n    return (\r\n        <div className={style.recipe}>\r\n            <h1>\r\n            {title}\r\n            </h1>\r\n            <ol className={style.list}>\r\n                {ingredients.map(ingredient =>  (\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n            <p>\r\n            {Math.floor(calories)} Kcal\r\n            </p>\r\n            <img className={style.image} src={image} alt=\"\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Recipe;","import React, {useEffect, useState} from 'react';\r\nimport Recipe from './Recipe'\r\nimport './App.css';\r\nrequire(\"dotenv\").config()\r\n\r\nconst App = () => {\r\n\r\n  const [recipes, setRecipes] = useState([]);\r\n  const [search, setSearch] =useState('');\r\n  const [query, setQuery] =useState('chicken');\r\n\r\n  useEffect ( () => {\r\n    getRecipes();\r\n  }, [query]);\r\n\r\n  const getRecipes = async () => {\r\n    const response = await fetch (`https://api.edamam.com/search?q=${query}&app_id=${process.env.REACT_APP_APP_ID}&app_key=${process.env.REACT_APP_APP_KEY}`);\r\n    const data = await response.json();\r\n    setRecipes(data.hits);\r\n    if (data.hits.length < 1) {\r\n      console.log(\"Error\");\r\n      alert(\"Nothing found\");\r\n    }\r\n  }\r\n\r\n  const updateSearch = e => {\r\n    setSearch(e.target.value);\r\n  }\r\n\r\n  const getSearch = e => {\r\n    e.preventDefault();\r\n    setQuery(search);\r\n    setSearch('');\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <form onSubmit={getSearch} className=\"search-form\">\r\n        <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch} />\r\n        <button className=\"search-button\" type=\"submit\">\r\n          Search\r\n        </button>\r\n      </form>\r\n      <div className=\"recpies\">\r\n      {recipes.map(recipe => (\r\n        <Recipe \r\n        key = {recipe.recipe.label}\r\n        title={recipe.recipe.label} calories={recipe.recipe.calories} image={recipe.recipe.image} ingredients={recipe.recipe.ingredients}/>\r\n      ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}